# -*- coding: utf-8 -*-
"""restaurant recommandation2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13CIZUSbpR-S1P7xvj12sDTJPv5bNMngl
"""

!pip install category_encoders

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, PolynomialFeatures
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import category_encoders as ce

# Load dataset
file_path = "/content/drive/MyDrive/Colab Notebooks/restaurant_recommendation_dataset.csv"
df = pd.read_csv(file_path)

# Define target variable
target_column = "rating"  # Predicting restaurant ratings

# Splitting dataset into features and target
X = df.drop(columns=[target_column])
y = df[target_column]

# Identify categorical and numerical columns
categorical_cols = X.select_dtypes(include=['object']).columns.tolist()
numerical_cols = X.select_dtypes(include=['number']).columns.tolist()

# Feature Engineering
# 1. Create interaction terms for numerical features
poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)
X_poly = poly.fit_transform(X[numerical_cols])
X_poly = pd.DataFrame(X_poly, columns=poly.get_feature_names_out(numerical_cols), index=X.index)
X = X.drop(columns=numerical_cols).join(X_poly)

# 2. Standard Scaling for numerical columns
scaler = StandardScaler()
X[X_poly.columns] = scaler.fit_transform(X[X_poly.columns])

# One-hot encoding for categorical features
preprocessor = ColumnTransformer(transformers=[("cat", OneHotEncoder(handle_unknown='ignore'), categorical_cols)], remainder="passthrough")
X_onehot_encoded = preprocessor.fit_transform(df.drop(columns=[target_column]))

# Split data once for all models
X_train, X_test, y_train, y_test = train_test_split(X_onehot_encoded, y, test_size=0.2, random_state=42)

# Models
models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(),
    "Gradient Boosting": GradientBoostingRegressor(),
    "Decision Tree": DecisionTreeRegressor()
}

# Train and evaluate models
results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    results[name] = {
        "MAE": mean_absolute_error(y_test, y_pred),
        "MSE": mean_squared_error(y_test, y_pred),
        "R²": r2_score(y_test, y_pred)
    }

# Print results
print("Model Performance:")
for name, metrics in results.items():
    print(f"{name} -> MAE: {metrics['MAE']:.4f}, MSE: {metrics['MSE']:.4f}, R²: {metrics['R²']:.4f}")